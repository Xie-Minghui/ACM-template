#include<bits/stdc++.h>
using namespace std;
#define per(i,a,b) for(int i = (a);i <= (b);++i)
const int maxn = 500 + 10;
int udir[maxn];
int in[maxn],out[maxn];
int n = 0,m = 0;
int rak[maxn],fa[maxn];
/*
给你一个图，判断当它分别是无向图和有向图的时候是否存在欧拉通路。
首先要判断是否是连通图（无向图）
无向图欧拉通路的条件：
1.   当G时仅有两个奇度节点的连通图时，图G的欧拉通路必以此两个节点为端点。

2.   当图G是无奇度节点的连通图时，G必有欧拉回路。（欧拉回路存在，欧拉通路必存在）。

3.   G为欧拉图（存在欧拉回路）的充分必要条件是G为无奇度节点的连通图。

有向图：
1.    有向图弱连通

2.    图中所有点入度==出度 或只有两个点的入度!=出度且这两个中一个入度-出度=1,另一个出度-入度=1.
*/
void init(){
	per(i,1,n){
		udir[i] = in[i] = out[i] = 0;
	}
	per(i,1,n){
		rak[i] = 0; fa[i] = i;
	}
}
void solve(){
	int cnt1 = 0,cnt2 = 0;
	vector<int> ans;
	per(i,1,n){
		if(udir[i]&1){
			++cnt1;
		}
		if(in[i] != out[i]){
			++cnt2;
			ans.push_back(i);
		}
	}
	if(cnt1 == 2 || cnt1 == 0){
		printf("Yes ");
	}else{
		printf("No ");
	}
	if(cnt2 == 0){
		printf("Yes\n");
	}else if(cnt2 == 2){
		if((in[ans[0]] - out[ans[0]] == 1 && out[ans[1]] - in[ans[1]] == 1) || 
			(in[ans[1]] - out[ans[1]] == 1 && out[ans[0]] - in[ans[0]] == 1)){
			printf("Yes\n");
		}else{
			printf("No\n");
		}
	}else{
		printf("No\n");
	}
	return ;
}
int find(int x){
	if(x == fa[x]){
		return x;
	}else{
		return fa[x] = find(fa[x]);
	}
}
void unit(int x,int y){
	x = find(x); y = find(y);
	if(x == y){
		return ;
	}
	if(rak[x] < rak[y]){
		fa[x] = y;
	}else{
		if(rak[x] == rak[y]){
			fa[y] = x;
			++rak[x];
		}else{
			fa[y] = x;
		}
	}
}
int main(){
	int T = 0;
	scanf("%d",&T);
	while(T--){
		scanf("%d %d",&n,&m);
		init();
		per(i,1,m){
			int x = 0,y = 0;
			scanf("%d %d",&x,&y);
			++udir[x]; ++udir[y];
			++out[x]; ++in[y];
			unit(x,y);
		}
		per(i,1,n){//最后要路径压缩一遍（压缩成只有一个父节点），否则下面的判断不成立
			find(i);//这里坑了我好几次了
		}
		//下面判断联通的时候所有节点只能有一个父节点，这样才是对的
		set<int> st;
		per(i,1,n){
			st.insert(fa[i]);
		}
		if(st.size() > 1){
			printf("No No\n");
			continue;
		}
		solve();
	}

	return 0;
}
